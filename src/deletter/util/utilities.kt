package deletter.util

import java.io.File
import java.io.FileOutputStream
import java.io.InputStream
import java.net.URL

/**
 * Gets base32 characters
 */
private val base32Chars = charArrayOf('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '2', '3', '4', '5', '6', '7')

/**
 * Regular expression to extract extension from url.
 */
private val regex = Regex("^https?://.*(\\.[a-zA-Z0-9]+)$", RegexOption.IGNORE_CASE)

/**
 * Gets digest from 64 bit id generated by snow flake.
 *
 * Upper 41 bits of the id (63 bit integer) is determined by the timestamp.
 * This function use these bits and encodes in base 32.
 *
 * This function is not tested enough so may not actually create digest from timestamp part of the id.
 *
 * @param snowFlakeId The id generated by snow flake to create digest.
 *
 * @return Base32-encoded string.
 */
fun getHashFromSnowFlake(snowFlakeId: Long): String {
    val bit5 = 0b11111L
    var timeStamp = snowFlakeId shr 22
    val str = StringBuilder(8)
    str.append(base32Chars[(timeStamp and bit5).toInt()])
    timeStamp = timeStamp shr 5
    str.append(base32Chars[(timeStamp and bit5).toInt()])
    timeStamp = timeStamp shr 5
    str.append(base32Chars[(timeStamp and bit5).toInt()])
    timeStamp = timeStamp shr 5
    str.append(base32Chars[(timeStamp and bit5).toInt()])
    timeStamp = timeStamp shr 5
    str.append(base32Chars[(timeStamp and bit5).toInt()])
    timeStamp = timeStamp shr 5
    str.append(base32Chars[(timeStamp and bit5).toInt()])
    timeStamp = timeStamp shr 5
    str.append(base32Chars[(timeStamp and bit5).toInt()])
    timeStamp = timeStamp shr 5
    str.append(base32Chars[(timeStamp and bit5).toInt()])
    return str.toString()
}

/**
 * Downloads a file from specific url and save to specific path.
 *
 * @param url The url to download file from.
 *
 * @param savePath The path to save the file.
 */
fun downloadFile(url: String, savePath: String) {
    var inputStream: InputStream? = null
    var outStream: FileOutputStream? = null
    try {

        val urlConnection = URL(url).openConnection()
        inputStream = urlConnection.getInputStream()

        val file = File(savePath)
        outStream = FileOutputStream(file, false)
        val bytes = ByteArray(512)

        while (true) {
            val ret = inputStream.read(bytes)
            if (ret <= 0)
                break
            outStream.write(bytes, 0, ret)
        }
    } finally {
        inputStream?.close()
        outStream?.close()
    }
}

/**
 * Returns extension including '.' from specified url.
 *
 * @param url The url to get extension from
 *
 * @return Extension of the url with first character '.'
 */
fun getExtensionFromUrl(url: String): String {
    val match = regex.matchEntire(url) ?: throw IllegalArgumentException("The url is invalid --- $url")

    val extension: String? = match.groups[1]?.value
    return extension ?: throw IllegalArgumentException("The url is invalid --- $url")
}
